1
00:00:00,330 --> 00:00:02,190
欢迎来到 Rust in Motion 第一章，

2
00:00:02,190 --> 00:00:03,830
首先来熟悉 Rust。

3
00:00:05,870 --> 00:00:07,910
Rust 是一门令人兴奋的新语言，旨在

4
00:00:07,910 --> 00:00:09,590
成为 C 和 C++ 的替代品

5
00:00:09,590 --> 00:00:10,750
，

6
00:00:11,030 --> 00:00:13,010
具有与这些语言相同的性能特点

7
00:00:13,010 --> 00:00:13,900
，

8
00:00:14,120 --> 00:00:16,300
但在编译时消除了某些类别的

9
00:00:16,430 --> 00:00:18,220
常见错误。

10
00:00:20,440 --> 00:00:22,690
Rust是一种通用语言。

11
00:00:22,800 --> 00:00:24,780
但它在下面一些场景会特别好：

12
00:00:24,780 --> 00:00:26,660
在需要保证运行速度的场景，

13
00:00:26,970 --> 00:00:28,670
在需要保证内存安全的场景，

14
00:00:29,000 --> 00:00:31,820
还有在你需要充分利用多核处理器的场景。

15
00:00:33,930 --> 00:00:36,030
Rust 可以胜任的特别领域包括

16
00:00:36,030 --> 00:00:38,340
高性能web服务，

17
00:00:38,340 --> 00:00:40,850
WebAssembly，

18
00:00:41,250 --> 00:00:42,800
命令行程序，

19
00:00:43,200 --> 00:00:44,720
和嵌入式设备。

20
00:00:46,800 --> 00:00:48,690
Rust 诞生于 Mozilla Research

21
00:00:48,690 --> 00:00:49,490
项目。

22
00:00:49,560 --> 00:00:51,390
Firefox 本身就是 Rust 能投入生产应用（而不是demo）

23
00:00:51,390 --> 00:00:53,360
的一个重要例子。

24
00:00:55,420 --> 00:00:57,490
Mozilla 使用 Rust 创建了

25
00:00:57,490 --> 00:00:59,760
一个名为 Servo 的实验性质的浏览器，

26
00:01:00,010 --> 00:01:01,950
在这款浏览器中，所有东西都是并行的。

27
00:01:02,500 --> 00:01:04,569
现在，Servo 的部分功能已经整合进

28
00:01:04,569 --> 00:01:05,819
 Firefox 了。

29
00:01:07,860 --> 00:01:10,050
Firefox Quantum 版包含了

30
00:01:10,050 --> 00:01:12,180
Servo 项目的 CSS 渲染引擎。

31
00:01:12,750 --> 00:01:14,760
Rust 是 Firefox 在这方面性能提升的

32
00:01:14,760 --> 00:01:16,780
一个重要因素。

33
00:01:18,870 --> 00:01:20,760
查看 Rust friends 页面，

34
00:01:20,760 --> 00:01:22,620
可以看到在生产环境中使用 Rust

35
00:01:22,620 --> 00:01:24,480
 的公司名单，

36
00:01:24,480 --> 00:01:26,430
从加密货币到 DevOps，再到

37
00:01:26,430 --> 00:01:27,069
大数据。

38
00:01:29,050 --> 00:01:30,430
速度，安全，

39
00:01:30,430 --> 00:01:32,010
还有无畏并发

40
00:01:32,080 --> 00:01:33,760
都是 Rust 的优点。

41
00:01:34,330 --> 00:01:36,250
Rust 的缺点之一是

42
00:01:36,250 --> 00:01:38,459
它以难学著称，

43
00:01:38,860 --> 00:01:40,040
这就是我们这门课的意义所在。

44
00:01:41,770 --> 00:01:42,990
我是 Carol Nichols。

45
00:01:43,600 --> 00:01:45,730
我是一名 Ruby 开发人员，

46
00:01:45,730 --> 00:01:47,580
为了编写性能更好的代码，我选择转向 Rust，而不是转向

47
00:01:47,580 --> 00:01:48,120
C 语言。

48
00:01:49,030 --> 00:01:50,310
我现在在 Rust Core 团队中，

49
00:01:50,470 --> 00:01:52,480
我是 The Rust Programming Language 一书的合著者，  

50
00:01:52,480 --> 00:01:53,370


51
00:01:53,740 --> 00:01:55,810
同时我还维护着 crates.io – Rust 官方提供的

52
00:01:55,810 --> 00:01:57,870
包的发布地。

53
00:01:57,870 --> 00:02:00,120
Rust 让我非常兴奋，因为

54
00:02:00,120 --> 00:02:02,160
我认为这是软件行业的一个机会，

55
00:02:02,160 --> 00:02:04,570
能够只犯普通错误

56
00:02:04,740 --> 00:02:06,660
而不是不断的内存安全错误。

57
00:02:06,660 --> 00:02:08,450
而这些内存安全问题

58
00:02:08,490 --> 00:02:10,020
会导致安全漏洞

59
00:02:10,020 --> 00:02:10,760
不断发生。

60
00:02:12,550 --> 00:02:13,840
我是 Jake Goulding。

61
00:02:14,270 --> 00:02:16,490
我是一名全栈开发人员，从 C

62
00:02:16,490 --> 00:02:18,190
到 Ruby 再到 JavaScript。

63
00:02:18,680 --> 00:02:20,830
我是 Rust 基础设施团队的一员，

64
00:02:21,050 --> 00:02:23,090
我是 Stack Overflow 上 Rust 相关问题的

65
00:02:23,090 --> 00:02:24,250
头号回答者。

66
00:02:24,650 --> 00:02:26,900
我还负责维护 play.rust-lang.org 上的

67
00:02:26,900 --> 00:02:28,630
在线 Rust 运行网站。

68
00:02:29,120 --> 00:02:31,310
我以前的一些工作涉及到

69
00:02:31,310 --> 00:02:33,350
使用 libxml2 进行繁重的 XML 处理。

70
00:02:33,350 --> 00:02:34,110


71
00:02:34,580 --> 00:02:36,500
现在我开始使用 Rust 编程是因为

72
00:02:36,500 --> 00:02:38,389
我相信它能够提高

73
00:02:38,389 --> 00:02:40,490
安全性和正确性，

74
00:02:40,490 --> 00:02:42,480
比如 XML 处理，

75
00:02:42,480 --> 00:02:44,710
同时又不会损失任何我们期望的

76
00:02:44,750 --> 00:02:46,669
系统级编程语言的性能。

77
00:02:48,400 --> 00:02:50,370
我们创立了 Integer 32，

78
00:02:50,500 --> 00:02:52,360
这是世界上首家专注于 Rust 的

79
00:02:52,360 --> 00:02:53,310
软件咨询公司，

80
00:02:53,650 --> 00:02:55,570
我们喜欢帮助人们学习 Rust。

81
00:02:56,169 --> 00:02:57,340
我会教第一章

82
00:02:57,340 --> 00:02:59,240
和第三章。而我会教

83
00:02:59,240 --> 00:03:00,340
第二章

84
00:03:00,340 --> 00:03:01,160
和第四章。

85
00:03:03,090 --> 00:03:04,919
Rust 有很多

86
00:03:04,919 --> 00:03:07,139
与当今大多数其他主流语言不同的概念

87
00:03:07,139 --> 00:03:07,780
。

88
00:03:08,600 --> 00:03:10,250
如果你在不熟悉这些概念的情况下

89
00:03:10,250 --> 00:03:11,810
尝试深入了解 Rust，

90
00:03:11,810 --> 00:03:13,639
这可能会令人

91
00:03:13,639 --> 00:03:15,090
沮丧。

92
00:03:15,850 --> 00:03:17,800
我们将介绍这些概念，以便

93
00:03:17,800 --> 00:03:19,810
你能够在继续 Rust 之旅时

94
00:03:19,810 --> 00:03:20,820
进行思考。

95
00:03:23,150 --> 00:03:24,130
在第一单元，

96
00:03:24,130 --> 00:03:26,020
我们将介绍一些结构的基本语法，

97
00:03:26,020 --> 00:03:28,030
这些结构你可能在其他语言中遇到过，

98
00:03:28,030 --> 00:03:30,230
比如变量、

99
00:03:30,230 --> 00:03:31,860
数据类型和函数。

100
00:03:32,260 --> 00:03:34,360
但我们将专注于那些在 Rust 中不同的部分

101
00:03:34,360 --> 00:03:35,210
。

102
00:03:36,950 --> 00:03:39,170
在第二章，我们将介绍所有权

103
00:03:39,170 --> 00:03:41,030
和借用所有权的概念。这些概念

104
00:03:41,030 --> 00:03:42,430
渗透到所有 Rust 的代码中，

105
00:03:42,430 --> 00:03:44,150
他们有助于确保 Rust 中的内存安全

106
00:03:44,150 --> 00:03:44,940
。

107
00:03:46,750 --> 00:03:47,860
在第三章，

108
00:03:47,860 --> 00:03:49,720
我们将讨论 Rust 的

109
00:03:49,720 --> 00:03:51,640
错误处理机制。

110
00:03:51,640 --> 00:03:53,530
Rust 迫使你考虑程序可能失败的

111
00:03:53,530 --> 00:03:55,540
所有场景，这在

112
00:03:55,540 --> 00:03:57,330
原型设计时可能会令人沮丧，

113
00:03:57,460 --> 00:03:59,760
但这会生成更健壮的产品代码。

114
00:04:01,480 --> 00:04:03,940
在第四章，我们将专注于生命周期概念 –

115
00:04:03,940 --> 00:04:05,890
一个编译器用来确保所有引用

116
00:04:05,890 --> 00:04:07,890
都有效的机制。

117
00:04:08,410 --> 00:04:10,360
一般来说你可以编写大量 Rust 代码而无需担心

118
00:04:10,360 --> 00:04:12,850
显式的生命周期注释。

119
00:04:12,970 --> 00:04:15,130
但我们不希望

120
00:04:15,130 --> 00:04:16,410
当你在错误消息

121
00:04:16,510 --> 00:04:18,300
或是在阅读其他人代码遇到他们时感到畏惧。

122
00:04:18,810 --> 00:04:20,529
我们将揭开这个概念的神秘面纱，

123
00:04:20,529 --> 00:04:22,360
并研究需要生命周期注释的

124
00:04:22,360 --> 00:04:23,800
场景。

125
00:04:26,060 --> 00:04:27,910
贯穿这些章节的一点是

126
00:04:28,010 --> 00:04:29,839
Rust 编译器可以帮助你

127
00:04:29,839 --> 00:04:30,760
编写更好的代码。（译者注，此句翻译拿捏不住）

128
00:04:32,100 --> 00:04:34,200
这意味着在你工作时

129
00:04:34,200 --> 00:04:35,570
出现编译器报错是很常见的。

130
00:04:36,029 --> 00:04:38,160
即使是有经验的 Rust 程序员

131
00:04:38,160 --> 00:04:39,580
也会经常遇到编译器报错。

132
00:04:40,730 --> 00:04:42,650
Rust 开发者们已经投入了大量工作来使

133
00:04:42,650 --> 00:04:43,850
这些报错信息易于理解

134
00:04:43,850 --> 00:04:44,770
并在报错里提供了帮助信息，

135
00:04:45,140 --> 00:04:47,120
因此我们将在整个课程中故意制造一些错误，

136
00:04:47,120 --> 00:04:49,160
以便获得阅读和

137
00:04:49,160 --> 00:04:50,640
处理错误的经验

138
00:04:52,080 --> 00:04:53,160
让我们安装 Rust

139
00:04:53,160 --> 00:04:53,900
然后开始吧！

