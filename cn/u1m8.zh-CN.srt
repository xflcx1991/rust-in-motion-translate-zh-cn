1
00:00:02,240 --> 00:00:04,090
结构体，Structs是structures的缩写，

2
00:00:04,540 --> 00:00:07,190
是将相关数据（如冰球运动员的所有属性）

3
00:00:07,370 --> 00:00:13,670
组合在一起的自定义类型。回想一下第4节中的基本数据类型，

4
00:00:13,670 --> 00:00:17,090
我们将通过将基本数据类型组合在一起来构建结构体。

5
00:00:17,090 --> 00:00:17,600


6
00:00:19,440 --> 00:00:21,150
我们将对比

7
00:00:21,150 --> 00:00:22,440
结构体和在第7讲

8
00:00:22,570 --> 00:00:29,150
介绍过的枚举。在本节中，我们将介绍什么时候结构体是适合用的；

9
00:00:30,040 --> 00:00:30,210
我们将

10
00:00:30,210 --> 00:00:33,250
学习定义和使用结构体的语法；

11
00:00:34,140 --> 00:00:36,600
我们还将讨论其他形式的结构体，

12
00:00:37,040 --> 00:00:39,100
即tuple结构体和unit结构体（译者注：术语不翻译）。

13
00:00:39,590 --> 00:00:44,840
我们还将简要回顾一下枚举，说明如何定义带字段名称的枚举值，

14
00:00:44,840 --> 00:00:45,780
就像结构体一样。

15
00:00:45,780 --> 00:00:46,060


16
00:00:48,040 --> 00:00:50,550
让我们从结构体何时适合用开始，

17
00:00:52,470 --> 00:00:54,160
还记得我们

18
00:00:54,160 --> 00:00:54,430


19
00:00:54,430 --> 00:00:55,800
undefined
在上一讲创建的 HockeyPosition 枚举吗？


20
00:00:56,690 --> 00:00:59,760
假设我们想要创建一个数据类型来为

21
00:00:59,760 --> 00:01:00,750
冰球运动员建模，

22
00:01:01,340 --> 00:01:03,050
这个场景将非常适合用结构体来描述。

23
00:01:05,180 --> 00:01:08,709
每个冰球运动员都有一堆属性来描述他。

24
00:01:09,440 --> 00:01:10,540
每个人都有一个名字，

25
00:01:10,700 --> 00:01:11,370
一个号码，

26
00:01:11,670 --> 00:01:15,750
一个球场位置，以及一些其他数据，比如他们今年进了多少球。

27
00:01:16,400 --> 00:01:19,650
所有运动员都有这些同样的属性，

28
00:01:20,240 --> 00:01:22,950
但每个球员的属性值都不同。

29
00:01:23,440 --> 00:01:27,180
将这些属性值放在一起，就能描述出一名特定的冰球运动员。

30
00:01:29,240 --> 00:01:34,300
用结构体来表示一个冰球运动员比用枚举要更适合，

31
00:01:34,740 --> 00:01:37,850
因为我们不是在不同种类的冰球运动员中进行选择。

32
00:01:38,540 --> 00:01:42,610
当在一组值中做选择时，

33
00:01:43,040 --> 00:01:44,550
例如香蕉、

34
00:01:44,560 --> 00:01:46,950
苹果和橙子，可以使用枚举。

35
00:01:47,600 --> 00:01:52,250
当希望该类型所有值都具有相同的属性时，

36
00:01:52,840 --> 00:01:57,450
例如多个食谱都有成分列表和说明列表时，可以使用结构体。

37
00:01:59,690 --> 00:02:02,550
让我们看看如何在代码中定义冰球运动员结构体。

38
00:02:04,480 --> 00:02:07,450
结构体定义以 struct 关键字开头， 

39
00:02:07,920 --> 00:02:10,530
然后是我们想要用于该结构体的名称。

40
00:02:10,530 --> 00:02:15,150
在这里，我们选择 HockyPlayer 作为结构体名称。按照惯例，结构体名称应该采用驼峰命名风格。

41
00:02:16,340 --> 00:02:18,850
接下来是大括号，大括号内是以逗号分隔的

42
00:02:19,340 --> 00:02:23,150
字段名和字段类型的列表。

43
00:02:23,840 --> 00:02:27,660
字段名称应采用蛇形命名法。

44
00:02:27,960 --> 00:02:36,050
对于 HockeyPlayer，我们有一个字符串类型的名称字段，一个 u8 类型的数字字段，一个 HocyerPosition 枚举类型的位置字段，

45
00:02:36,840 --> 00:02:39,880
以及一个也是 u8 类型的今年进球数的字段。

46
00:02:42,090 --> 00:02:44,550
现在是时候使用这个结构体定义了。

47
00:02:45,940 --> 00:02:48,450
结构体定义列出了属性集，

48
00:02:48,840 --> 00:02:55,860
接着我们可以用值填充结构体来表示特定实例。为了实例化

49
00:02:55,860 --> 00:02:59,450
一个特定的冰球运动员并将数据存储在变量中，

50
00:03:00,040 --> 00:03:02,250
我们写变量名，等于号和结构体名称，

51
00:03:02,740 --> 00:03:04,020
然后是大括号，

52
00:03:04,660 --> 00:03:07,750
然后列出每个字段以及希望设置的值。

53
00:03:08,240 --> 00:03:11,010
记住，以分号结束赋值语句。

54
00:03:12,040 --> 00:03:15,250
需要用值初始化结构体的所有字段。

55
00:03:16,040 --> 00:03:17,550
一旦我们有了一个结构体实例，

56
00:03:17,940 --> 00:03:25,210
我们就可以通过使用变量名，然后是一个点，然后是我们想要访问的字段来访问该结构体的特定字段中的值。

57
00:03:27,540 --> 00:03:29,120
只要实例是可变的，

58
00:03:29,130 --> 00:03:29,820
我们就可以

59
00:03:29,820 --> 00:03:32,950
更改实例字段中的值。

60
00:03:34,180 --> 00:03:37,050
这段代码为今年进球数字段加一，

61
00:03:37,840 --> 00:03:41,660
现在程序打印“Bryan Rust has scored 8 goals this season”。

62
00:03:43,880 --> 00:03:46,850
大多数结构体都有命名字段，

63
00:03:47,440 --> 00:03:49,950
但也有元组结构体和单元结构体。

64
00:03:50,840 --> 00:03:54,760
让我们简单了解了一下这些结构。

65
00:03:54,760 --> 00:03:59,550
元组结构体是指光有类型但没字段名称的结构体。

66
00:04:00,540 --> 00:04:02,450
元组结构体的行为与元组类似。

67
00:04:03,240 --> 00:04:06,030
你可以使用点和索引来访问他们的字段，

68
00:04:06,040 --> 00:04:06,990
索引从零开始。

69
00:04:08,140 --> 00:04:08,950
例如，

70
00:04:09,340 --> 00:04:11,440
这里有个名为 Triangle 的元组，

71
00:04:11,640 --> 00:04:15,150
定义为存储三角形三边的长度。

72
00:04:17,490 --> 00:04:17,839


73
00:04:17,839 --> 00:04:23,550
就 Rust 的类型检查器而言，元组结构体可用于创建被认为与普通元组

74
00:04:24,080 --> 00:04:26,550
或其他元组结构不同的类型。

75
00:04:27,500 --> 00:04:31,350
我们不能将一个普通的元组传递给这个只需要一个 Triangle 元组结构体类型参数的函数。

76
00:04:32,140 --> 00:04:32,890
如果这样做了，

77
00:04:32,900 --> 00:04:33,920
会收到类型错误。

78
00:04:34,640 --> 00:04:41,050
通过使用元组结构体来给元组命名，使其成为与其他元组不兼容的新类型。

79
00:04:43,440 --> 00:04:47,420
元组结构体的一种常见用法称为 newtype 模式，

80
00:04:47,940 --> 00:04:53,089
即用元组结构体包装现有类型，并添加一个元素以增加含义。

81
00:04:54,140 --> 00:04:55,810
例如，我们将

82
00:04:55,820 --> 00:04:57,950
u8 封装在名为 Meters 的结构体中，

83
00:04:58,510 --> 00:05:02,450
这就保证了在使用 Meters 类型值的地方，

84
00:05:02,880 --> 00:05:04,000
我们不能使用普通的 u8 变量。

85
00:05:04,000 --> 00:05:04,550


86
00:05:05,440 --> 00:05:10,550
如果我们尝试编译这段试图调用一个使用普通 u8 的 Meters 函数的代码，

87
00:05:11,140 --> 00:05:12,150
会得到类型错误。

88
00:05:13,180 --> 00:05:17,450
这可以防止因意外使用某个错误的值而导致的 bug。

89
00:05:19,770 --> 00:05:23,920
结构体实际上不需要任何字段。没有字段的

90
00:05:23,920 --> 00:05:25,140
结构体称为单元结构体。

91
00:05:25,140 --> 00:05:25,650


92
00:05:26,940 --> 00:05:27,279


93
00:05:27,279 --> 00:05:29,150
单元结构体似乎现在还看不出有什么用，

94
00:05:29,810 --> 00:05:31,370
但你可以为它们定义方法。

95
00:05:32,140 --> 00:05:34,250
我们将在下一节谈论方法。

96
00:05:36,400 --> 00:05:37,250
最后一件事：

97
00:05:38,339 --> 00:05:40,950
既然我们已经看到带有命名字段的结构体的样子，

98
00:05:41,440 --> 00:05:42,140
那么让我们来看看

99
00:05:42,140 --> 00:05:44,850
像结构体一样带有命名字段的枚举。

100
00:05:46,990 --> 00:05:49,290
还记得上一节中的时种示例吗？

101
00:05:50,240 --> 00:05:52,760
每个变体都有代表小时、

102
00:05:52,770 --> 00:05:54,080
分钟或秒的值。

103
00:05:54,690 --> 00:05:57,450
但是很难分辨哪个字段代表哪个值 - 而这就是需要知道的。

104
00:05:57,839 --> 00:06:04,410
我们可以让这些变体更像结构体，并添加字段名称，这样就能让效果更好。

105
00:06:05,440 --> 00:06:08,050
我们还必须将括号改为大括号。

106
00:06:10,140 --> 00:06:11,800
这本节中，

107
00:06:11,810 --> 00:06:13,650
我们介绍了何时使用结构体与枚举，

108
00:06:14,100 --> 00:06:17,320
如何声明和使用结构体、元组和

109
00:06:17,320 --> 00:06:19,350
单元结构体，以及

110
00:06:19,360 --> 00:06:20,420
看起来像结构体的枚举变体。

111
00:06:21,740 --> 00:06:23,350
这就是结构体在 Rust 中的使用方式。

112
00:06:24,140 --> 00:06:26,910
去吧，把你的数据组织成新的类型

113
00:06:28,240 --> 00:06:28,720
下一节，

114
00:06:28,730 --> 00:06:32,750
我们将讨论如何通过在结构体和枚举上定义方法来为它们添加行为。

