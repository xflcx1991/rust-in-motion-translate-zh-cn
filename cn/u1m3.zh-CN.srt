1
00:00:02,990 --> 00:00:04,910
在本节中，我们将讲解

2
00:00:04,910 --> 00:00:06,280
变量

3
00:00:06,440 --> 00:00:08,510
并着重谈论其他语言和 Rust

4
00:00:08,510 --> 00:00:10,340
在变量上的不同点。

5
00:00:10,340 --> 00:00:11,240


6
00:00:11,539 --> 00:00:13,400
首先，我们将展示在 Rust 中

7
00:00:13,400 --> 00:00:14,420
声明变量的语法。

8
00:00:14,420 --> 00:00:16,430
接着，我们将讲述

9
00:00:16,430 --> 00:00:18,380
可变性，也就是

10
00:00:18,380 --> 00:00:20,360
是否允许改变一个变量的值。

11
00:00:20,360 --> 00:00:20,870


12
00:00:21,750 --> 00:00:23,910
最后，我们将介绍

13
00:00:23,910 --> 00:00:26,210
无论是否显式声明类型，Rust 中的每个变量都拥有

14
00:00:26,210 --> 00:00:27,090
确定的类型。

15
00:00:27,090 --> 00:00:27,690


16
00:00:28,490 --> 00:00:29,450
你也许已经

17
00:00:29,450 --> 00:00:31,870
从其他编程语言的经验中熟悉了变量的概念。

18
00:00:32,210 --> 00:00:34,100
回顾下，变量就像一个盒子，

19
00:00:34,100 --> 00:00:36,320
你可以对其命名

20
00:00:36,320 --> 00:00:38,370
并且把数据存进去供之后使用。

21
00:00:39,140 --> 00:00:41,210
我们写代码时可以通过变量名来操作这个盒子，

22
00:00:41,210 --> 00:00:43,400
不需要知道里面到底是什么，

23
00:00:43,400 --> 00:00:45,430
直到程序运行起来。

24
00:00:45,620 --> 00:00:47,479
我们来讲讲如何在 Rust 声明一个变量。

25
00:00:47,479 --> 00:00:49,400
所有的变量

26
00:00:49,400 --> 00:00:50,330
在声明时都以

27
00:00:50,330 --> 00:00:52,159
关键字 let 开头，后面跟着

28
00:00:52,159 --> 00:00:54,240
我们希望的变量名。（译者注，并不是，还有其他的变量声明和使用方式）如图所示，

29
00:00:54,240 --> 00:00:56,210
我们声明了一个名为 x 的变量。

30
00:00:56,730 --> 00:00:58,770
为了给变量一个初始值，

31
00:00:58,770 --> 00:01:00,060
我们使用等号，

32
00:01:00,060 --> 00:01:01,890
接着写上我们想要赋予这个变量

33
00:01:01,890 --> 00:01:03,140
的值。

34
00:01:03,810 --> 00:01:05,390
这里，我们选择的值是 5。

35
00:01:06,550 --> 00:01:09,110
Rust 语句之间用分号隔开。

36
00:01:09,510 --> 00:01:11,370
一旦声明了一个变量，

37
00:01:11,370 --> 00:01:12,620
我们就可以用其名字来使用。

38
00:01:13,290 --> 00:01:14,069
来看这个例子，

39
00:01:14,069 --> 00:01:15,350
有三个变量，

40
00:01:15,530 --> 00:01:17,790
其中 z 是使用

41
00:01:17,790 --> 00:01:19,650
x 和 y 的和来初始化的。

42
00:01:19,650 --> 00:01:21,750


43
00:01:21,750 --> 00:01:23,060
关于这段代码还有几点要注意：

44
00:01:23,910 --> 00:01:26,100
main 函数是特殊的函数，

45
00:01:26,100 --> 00:01:28,459
它是程序的入口。

46
00:01:29,100 --> 00:01:31,410
当我们执行 cargo run 时也是 main 函数被调用。

47
00:01:31,410 --> 00:01:32,330


48
00:01:32,610 --> 00:01:34,470
我们将在未来章节中再讨论什么是函数。

49
00:01:34,470 --> 00:01:35,180


50
00:01:35,490 --> 00:01:37,910
println! 宏是你在 Rust 中用来打印输出的。

51
00:01:38,250 --> 00:01:40,370
其第一个参数是格式化字符串，

52
00:01:40,709 --> 00:01:42,750
格式化字符串里的花括号

53
00:01:42,750 --> 00:01:44,580
是我们想要输出的值的占位符，

54
00:01:44,580 --> 00:01:46,650
这些要输出的值在

55
00:01:46,650 --> 00:01:48,200
在后面的参数给出了。

56
00:01:48,770 --> 00:01:50,810
标准库文档给出了

57
00:01:50,810 --> 00:01:52,180
格式化字符串的所有格式参考。

58
00:01:53,520 --> 00:01:55,230
当我们切换到终端

59
00:01:55,230 --> 00:01:57,530
并执行 cargo run 来运行这个程序，

60
00:01:58,110 --> 00:01:59,240
可以看到打印出来 z 的值是 11。

61
00:01:59,240 --> 00:02:00,110


62
00:02:01,060 --> 00:02:03,110
接下来，我们来聊聊可变性。

63
00:02:03,850 --> 00:02:06,010
Rust 里的变量有些不同，

64
00:02:06,010 --> 00:02:08,100
默认情况下，

65
00:02:08,290 --> 00:02:10,350
变量是不可变的。

66
00:02:10,490 --> 00:02:12,310
这个例子给出了一个变量，

67
00:02:12,310 --> 00:02:14,139
名为 x，初始值是 5。

68
00:02:14,139 --> 00:02:14,780


69
00:02:15,130 --> 00:02:16,840
下一行，尝试对 x 加 1 并

70
00:02:16,840 --> 00:02:18,120
赋值给 x 。

71
00:02:19,180 --> 00:02:21,190
第三行代码的下划线

72
00:02:21,190 --> 00:02:23,020
是 IDE 给出的提示，告诉我们

73
00:02:23,020 --> 00:02:24,600
这一行有编译错误。

74
00:02:25,780 --> 00:02:27,690
如果在终端中编译这段代码，

75
00:02:27,970 --> 00:02:29,910
就能看到完整的编译错误，

76
00:02:29,980 --> 00:02:31,900
错误提示说不能为

77
00:02:31,900 --> 00:02:33,810
不可变变量 x 两次赋值。

78
00:02:34,690 --> 00:02:36,300
当 x 被赋初始值 5 后，

79
00:02:36,820 --> 00:02:38,460
就不能再改变这个值了。

80
00:02:39,010 --> 00:02:41,139
Rust 变量默认不可变的原因是

81
00:02:41,139 --> 00:02:43,740
帮助避免一些 bugs。

82
00:02:44,419 --> 00:02:45,350
Bugs 会在这样的情景下发生：

83
00:02:45,350 --> 00:02:46,610
如果你正在使用某个变量

84
00:02:46,610 --> 00:02:48,790
并假设它不会改变，

85
00:02:49,040 --> 00:02:51,080
但另一块程序却可能修改了变量

86
00:02:51,080 --> 00:02:53,380
的值并因此打破了你的假设。

87
00:02:53,840 --> 00:02:56,270
与此相反，Rust 用

88
00:02:56,270 --> 00:02:58,280
变量默认不可变

89
00:02:58,280 --> 00:03:00,040
来保证上述假设。

90
00:03:00,380 --> 00:03:02,540
如果要在程序中使得

91
00:03:02,540 --> 00:03:04,510
一个变量是可变的，

92
00:03:04,700 --> 00:03:06,830
我们必须要显式地声明。

93
00:03:06,830 --> 00:03:08,690
声明一个

94
00:03:08,690 --> 00:03:09,889
变量的方式

95
00:03:09,889 --> 00:03:11,840
是使用 mut 关键字。

96
00:03:11,840 --> 00:03:14,310
使用 let mut x = 的形式，

97
00:03:14,450 --> 00:03:16,520
就可以随时通过对 x 重新赋值，

98
00:03:16,520 --> 00:03:18,450
来改变它的值了。

99
00:03:18,830 --> 00:03:21,220
在前一个例子中添加了 mut 之后，

100
00:03:21,290 --> 00:03:23,360
编译就没有错误了，

101
00:03:23,360 --> 00:03:25,600
并且打印出了 x 的值是 6。

102
00:03:27,910 --> 00:03:29,740
Rust 中的变量和别的语言相比

103
00:03:29,740 --> 00:03:32,220
有一个很大的不同点，

104
00:03:32,590 --> 00:03:33,520
那就是每个 Rust 中的变量

105
00:03:33,520 --> 00:03:34,860
都有类型。

106
00:03:36,020 --> 00:03:38,000
图中的两个变量基于他们包含的值

107
00:03:38,000 --> 00:03:39,670
而拥有不同的类型。

108
00:03:40,100 --> 00:03:42,320
如果要标注一个变量的类型，

109
00:03:42,320 --> 00:03:44,180
可以在变量名后放置一个冒号

110
00:03:44,180 --> 00:03:44,890


111
00:03:45,110 --> 00:03:47,260
接着写类型名（在等号前）。

112
00:03:47,690 --> 00:03:49,040
在前一个例子中，

113
00:03:49,040 --> 00:03:51,030
并不需要明确指出 x 是 i32 类型。

114
00:03:51,030 --> 00:03:52,960
 Rust 能够

115
00:03:52,960 --> 00:03:54,850
根据赋予的值 5，

116
00:03:54,850 --> 00:03:56,310
来推断变量的类型。

117
00:03:56,770 --> 00:03:58,900
如果想要明确标注变量类型，

118
00:03:58,900 --> 00:03:59,610
没问题。

119
00:04:00,310 --> 00:04:02,170
然而，更加符合 Rust 风格的写法是

120
00:04:02,170 --> 00:04:04,330
不标注变量类型，

121
00:04:04,330 --> 00:04:06,190
除非发生不标注 Rust 编译器 

122
00:04:06,190 --> 00:04:08,190
就无法推断变量类型的

123
00:04:08,190 --> 00:04:09,050
情况。

124
00:04:09,700 --> 00:04:11,710
如果对一个变量的类型不是很确定，

125
00:04:11,710 --> 00:04:13,890
有一个小技巧，

126
00:04:14,080 --> 00:04:15,370
那就是对该变量

127
00:04:15,370 --> 00:04:17,550
标注一个肯定是错误的类型。

128
00:04:17,950 --> 00:04:19,870
例如， 

129
00:04:19,870 --> 00:04:21,750
这里有个变量 y，它的值是 true，

130
00:04:22,140 --> 00:04:24,070
而我们想知道 true 的类型是什么。

131
00:04:24,070 --> 00:04:25,990
 由于可以确定 true 的类型

132
00:04:25,990 --> 00:04:26,950
肯定不是 i32，

133
00:04:26,950 --> 00:04:28,170


134
00:04:28,839 --> 00:04:31,290
所以可以为 y 标注类型 i32。

135
00:04:32,970 --> 00:04:34,790
此时的编译错误可以指出

136
00:04:34,790 --> 00:04:36,640
true 的类型是 bool。

137
00:04:37,190 --> 00:04:38,240
在本节中，

138
00:04:38,240 --> 00:04:40,420
我们讲到了如何声明一个变量，

139
00:04:40,760 --> 00:04:42,170
如何通过 mut 关键字

140
00:04:42,170 --> 00:04:43,390
来声明可变变量，

141
00:04:43,760 --> 00:04:45,570
还有任何一个变量都拥有类型。

142
00:04:46,420 --> 00:04:47,529
在下一讲， 

