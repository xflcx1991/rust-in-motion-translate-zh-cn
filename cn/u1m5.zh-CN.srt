1
00:00:01,940 --> 00:00:03,940
就像其他语言中的函数一样，

2
00:00:04,010 --> 00:00:06,350
Rust 中的函数被用来对代码进行封装，

3
00:00:06,350 --> 00:00:08,360
以便可以使用不同的值

4
00:00:08,360 --> 00:00:09,980
反复调用。

5
00:00:10,520 --> 00:00:12,380
在本节中，我们将学习

6
00:00:12,380 --> 00:00:13,210
如何在 Rust 中使用函数。

7
00:00:13,210 --> 00:00:15,200
 我们将会用到

8
00:00:15,200 --> 00:00:17,090
u1m3 讲到的变量和

9
00:00:17,090 --> 00:00:18,850
u1m4 讲到的原始数据类型

10
00:00:19,160 --> 00:00:21,050
来写函数。

11
00:00:21,050 --> 00:00:21,610


12
00:00:22,620 --> 00:00:24,900
我们将介绍函数的定义，

13
00:00:24,900 --> 00:00:26,360
函数的调用，

14
00:00:26,640 --> 00:00:28,470
以及

15
00:00:28,470 --> 00:00:30,440
更惯用的方式来返回函数值。

16
00:00:31,720 --> 00:00:32,530
让我们先从

17
00:00:32,530 --> 00:00:34,320
如何定义一个函数开始。

18
00:00:35,360 --> 00:00:37,390
这是一般的函数定义的样子，

19
00:00:37,390 --> 00:00:39,400


20
00:00:39,400 --> 00:00:41,100
以 fn 关键字开头，

21
00:00:41,229 --> 00:00:43,180
后面是函数名，任何你想起的名字。

22
00:00:43,180 --> 00:00:44,070


23
00:00:44,380 --> 00:00:46,360
括号里，列出每一个

24
00:00:46,360 --> 00:00:48,280
参数，

25
00:00:48,280 --> 00:00:50,380
每个参数给出参数名，一个冒号，

26
00:00:50,380 --> 00:00:52,240
和其类型。

27
00:00:52,240 --> 00:00:53,250


28
00:00:53,920 --> 00:00:55,960
用逗号分隔每个参数名/类型对。

29
00:00:55,960 --> 00:00:57,850
 函数可以

30
00:00:57,850 --> 00:00:59,770
接受任意多的参数。

31
00:01:01,400 --> 00:01:03,450
如果函数返回一个值，

32
00:01:03,650 --> 00:01:05,810
先放一个连字符，再放一个大于号

33
00:01:05,810 --> 00:01:06,910
来做一个箭头标志，

34
00:01:07,280 --> 00:01:09,720
然后指定返回值的类型。

35
00:01:10,980 --> 00:01:13,220
如果函数没有返回值，

36
00:01:13,380 --> 00:01:14,270
去掉箭头和

37
00:01:14,270 --> 00:01:15,410
返回值类型。

38
00:01:16,900 --> 00:01:19,290
然后，写一对大括号，

39
00:01:19,470 --> 00:01:21,959
里面写函数主体代码，

40
00:01:22,390 --> 00:01:23,790
并关闭大括号。

41
00:01:24,610 --> 00:01:26,470
还有可能有更复杂函数签名，可以在以后的课程中看到例子。

42
00:01:26,470 --> 00:01:27,330


43
00:01:27,490 --> 00:01:29,330


44
00:01:29,330 --> 00:01:30,420


45
00:01:31,700 --> 00:01:33,250
这里有个具体的例子。

46
00:01:34,060 --> 00:01:36,390
这个函数名为 next_birthday，

47
00:01:36,790 --> 00:01:39,040
他有两个参数：

48
00:01:39,040 --> 00:01:40,440
name，string slice类型，

49
00:01:40,900 --> 00:01:43,260
和 current_age，u8 类型。

50
00:01:44,140 --> 00:01:46,000
这个函数没有返回值。

51
00:01:47,260 --> 00:01:49,150
函数体主要内容是计算

52
00:01:49,150 --> 00:01:51,440
一个人下一次生日是多少岁，

53
00:01:51,730 --> 00:01:53,860
并用这个人姓名和下一次生日时年龄

54
00:01:53,860 --> 00:01:54,990
打印一句话。

55
00:01:56,060 --> 00:01:58,400
接下来，让我们看看如何调用函数。

56
00:01:59,650 --> 00:02:01,460
一旦我们定义好了函数，

57
00:02:01,690 --> 00:02:04,000
我们就可以使用函数名

58
00:02:04,000 --> 00:02:05,520
加括号，括号内

59
00:02:05,950 --> 00:02:08,020
填充形参的形式调用

60
00:02:08,020 --> 00:02:09,820
该函数。

61
00:02:11,090 --> 00:02:12,680
这里是如何调用 next_birthday 函数的

62
00:02:12,680 --> 00:02:13,990
样子，

63
00:02:14,570 --> 00:02:16,190
首先使用“Jake”和

64
00:02:16,190 --> 00:02:17,230
33 调用，

65
00:02:20,280 --> 00:02:22,040
再使用“Vivian”和 0

66
00:02:22,040 --> 00:02:22,889
调用。

67
00:02:29,680 --> 00:02:30,880
运行这个函数会打印出

68
00:02:30,880 --> 00:02:32,830
“Hi Jake, on your next birthday, you'll

69
00:02:32,830 --> 00:02:33,810
be 34!”

70
00:02:33,990 --> 00:02:36,100
和“Hi Vivian, on your next birthday

71
00:02:36,100 --> 00:02:37,169
you'll be 1!”

72
00:02:38,750 --> 00:02:40,639
最后，让我们来看看一个返回值的函数。

73
00:02:40,639 --> 00:02:41,650


74
00:02:42,080 --> 00:02:44,000
我们将写一个函数，

75
00:02:44,000 --> 00:02:45,870
接收一个数字并返回其平方。

76
00:02:47,110 --> 00:02:49,200
请注意，函数体的最后一行，

77
00:02:49,300 --> 00:02:51,030
末尾没有分号。

78
00:02:51,889 --> 00:02:53,770
这个语法是计算表达式的值

79
00:02:53,770 --> 00:02:55,660
并作为函数返回值。

80
00:02:55,660 --> 00:02:56,669


81
00:02:58,180 --> 00:03:00,010
这个主函数会打印“The

82
00:03:00,010 --> 00:03:01,110
answer is 9”。

83
00:03:02,780 --> 00:03:05,169
如果我们像这样定义函数签名，

84
00:03:05,330 --> 00:03:07,010
以便它能返回值，

85
00:03:07,010 --> 00:03:08,870
但却不小心在最后一个表达式

86
00:03:08,870 --> 00:03:10,370
放了一个分号。

87
00:03:10,669 --> 00:03:11,830
这将得到一个错误。

88
00:03:12,550 --> 00:03:14,410
Rust 给了有用的提示，

89
00:03:14,410 --> 00:03:16,419
也就是这里可能不应该放这个分号。

90
00:03:16,419 --> 00:03:17,080


91
00:03:18,270 --> 00:03:20,100
Rust 用 return 关键字

92
00:03:20,100 --> 00:03:22,510
来提前从函数返回，

93
00:03:22,850 --> 00:03:25,160
如果你愿意也可以在函数末尾使用它（译者注，指return）。

94
00:03:25,560 --> 00:03:27,540
然而，Rust 的函数返回值惯用法

95
00:03:27,540 --> 00:03:30,139
是隐式地返回最后一个表达式的值来使用。

96
00:03:31,760 --> 00:03:33,290
现在你知道如何

97
00:03:33,290 --> 00:03:35,530
定义和调用 Rust 里带参数和返回值的

98
00:03:35,600 --> 00:03:37,300
函数了。

99
00:03:37,580 --> 00:03:38,300
接下来，

100
00:03:38,450 --> 00:03:40,910
让我们来看看 Rust 中的控制流。

